{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./Playerbid.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Timer(){const[totalSeconds,setTotalSeconds]=useState(0);const[isActive,setIsActive]=useState(false);useEffect(()=>{let interval=null;// Start the timer when isActive is true\nif(isActive){interval=setInterval(()=>{setTotalSeconds(totalSeconds=>totalSeconds+1);},1000);}else{// Clear the interval when isActive is false\nclearInterval(interval);}// Cleanup function to clear interval when component unmounts\nreturn()=>clearInterval(interval);},[isActive]);// Run this effect whenever isActive changes\n// Function to handle start, pause, and reset\nconst toggleTimer=()=>{setIsActive(!isActive);};const resetTimer=()=>{setTotalSeconds(0);setIsActive(false);};// Calculate hours, minutes, and seconds\nconst hours=Math.floor(totalSeconds/3600);const minutes=Math.floor(totalSeconds%3600/60);const seconds=totalSeconds%60;useEffect(()=>{const handleKeyPress=event=>{if(event.key==='9'){toggleTimer();// Start or pause the timer when '9' is pressed\n}else if(event.key==='8'){toggleTimer();// Pause the timer when 'Enter' is pressed\n}else if(event.key==='0'){resetTimer();// Reset the timer when '0' is pressed\n}};// Add event listener for keydown event\nwindow.addEventListener('keydown',handleKeyPress);// Remove event listener when component unmounts\nreturn()=>{window.removeEventListener('keydown',handleKeyPress);};},[]);// This effect runs only once on component mount\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"timer-box\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"timer-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"buttons\",children:[!isActive?/*#__PURE__*/_jsx(\"button\",{className:\"mx-3 btn text-light  border rounded-2\",style:{background:'  #010203'},onClick:toggleTimer,children:\"Start\"}):/*#__PURE__*/_jsx(\"button\",{className:\"mx-3 btn text-light  border rounded-2\",style:{background:'  #010203'},onClick:toggleTimer,children:\"Pause\"}),/*#__PURE__*/_jsx(\"button\",{className:\"mx-3 btn text-light  border rounded-2\",style:{background:'  #010203'},onClick:resetTimer,children:\"Reset\"})]}),/*#__PURE__*/_jsxs(\"h1\",{className:\"tm\",children:[hours<10?'0'+hours:hours,\":\",minutes<10?'0'+minutes:minutes,\":\",seconds<10?'0'+seconds:seconds]})]})});}export default Timer;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Timer","totalSeconds","setTotalSeconds","isActive","setIsActive","interval","setInterval","clearInterval","toggleTimer","resetTimer","hours","Math","floor","minutes","seconds","handleKeyPress","event","key","window","addEventListener","removeEventListener","className","children","style","background","onClick"],"sources":["C:/Users/Dell SSD/Desktop/mern/entri/auction/my-court/src/components/common/timer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Playerbid.css';\r\n\r\nfunction Timer() {\r\n  const [totalSeconds, setTotalSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    // Start the timer when isActive is true\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setTotalSeconds(totalSeconds => totalSeconds + 1);\r\n      }, 1000);\r\n    } else {\r\n      // Clear the interval when isActive is false\r\n      clearInterval(interval);\r\n    }\r\n\r\n    // Cleanup function to clear interval when component unmounts\r\n    return () => clearInterval(interval);\r\n  }, [isActive]); // Run this effect whenever isActive changes\r\n\r\n  // Function to handle start, pause, and reset\r\n  const toggleTimer = () => {\r\n    setIsActive(!isActive);\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setTotalSeconds(0);\r\n    setIsActive(false);\r\n  };\r\n\r\n  // Calculate hours, minutes, and seconds\r\n  const hours = Math.floor(totalSeconds / 3600);\r\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n  const seconds = totalSeconds % 60;\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => {\r\n      if (event.key === '9') {\r\n        toggleTimer(); // Start or pause the timer when '9' is pressed\r\n      } else if (event.key === '8') {\r\n        toggleTimer(); // Pause the timer when 'Enter' is pressed\r\n      } else if (event.key === '0') {\r\n        resetTimer(); // Reset the timer when '0' is pressed\r\n      }\r\n    };\r\n\r\n    // Add event listener for keydown event\r\n    window.addEventListener('keydown', handleKeyPress);\r\n\r\n    // Remove event listener when component unmounts\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n    };\r\n  }, []); // This effect runs only once on component mount\r\n\r\n  return (\r\n    <div className=\"timer-box\">\r\n      <div className=\"timer-content\">\r\n        <div className=\"buttons\">\r\n          {!isActive ? (\r\n            <button className='mx-3 btn text-light  border rounded-2' style={{background: '  #010203'}} onClick={toggleTimer}>Start</button>\r\n          ) : (\r\n            <button className='mx-3 btn text-light  border rounded-2' style={{background: '  #010203'}} onClick={toggleTimer}>Pause</button>\r\n          )}\r\n          <button className='mx-3 btn text-light  border rounded-2' style={{background: '  #010203'}} onClick={resetTimer}>Reset</button>\r\n        </div>\r\n        <h1 className='tm'>{hours < 10 ? '0' + hours : hours}:{minutes < 10 ? '0' + minutes : minutes}:{seconds < 10 ? '0' + seconds : seconds}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}